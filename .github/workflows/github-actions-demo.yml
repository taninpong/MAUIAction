name: CI Build

on:
  push:
    branches: [devmaster]
    paths-ignore:
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"
  pull_request:
    branches: [devmaster]
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true # Disable sending .NET CLI telemetry

jobs:
  # MAUI Android Build
  # build-android:
  #   runs-on: windows-2022
  #   name: Android Build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup .NET 7
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: 7.0.x
  #     - name: github.run_number
  #       run: ${{ github.run_number }}
  #     - name: Install MAUI Workload ${{ github.run_number }}
  #       run: dotnet workload install maui --ignore-failed-sources

  #     - name: Restore Dependencies
  #       run: dotnet restore MAUIAction/MAUIAction/MAUIAction.csproj

  #     - name: Build MAUI Android
  #       run: dotnet publish MAUIAction/MAUIAction/MAUIAction.csproj -c Release -f net7.0-android --no-restore

  #     - name: Upload Android Artifact
  #       uses: actions/upload-artifact@v2.3.1
  #       with:
  #         name: MAUIAction
  #         path: MAUIAction/MAUIAction/bin/Release/net7.0-android/*Signed.a*
  #     - name: Setup App Center CLI
  #       run: npm install -g appcenter-cli
  #     - name: Deploy to App Center
  #       run: appcenter distribute release --app Dev-Demo/MAUIAction
  #         --file MAUIAction/MAUIAction/bin/Release/net7.0-android/thes.maui.client-Signed.apk
  #         --token ${{ secrets.APP_CENTER_API_TOKEN_APP }} --group Owner

  # MAUI Windows Build
  # build-windows:
  #   runs-on: windows-2022
  #   name: Windows Build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup .NET 7
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: 7.0.x
  #         include-prerelease: true

  #     - name: Setup MSBuild
  #       uses: microsoft/setup-msbuild@v1.1
  #       with:
  #         vs-prerelease: true

  #     - name: Install MAUI Workloads
  #       run: |
  #         dotnet workload install maui --ignore-failed-sources

  #     - name: Restore Dependencies
  #       run: dotnet restore MAUIAction/MAUIAction/MAUIAction.csproj

  #     - name: Build MAUI Windows
  #       run: msbuild MAUIAction/MAUIAction/MAUIAction.csproj -r -p:Configuration=Release -p:RestorePackages=false -p:TargetFramework=net7.0-windows10.0.19041 /p:GenerateAppxPackageOnBuild=true

  #     - name: Upload Windows Artifact
  #       uses: actions/upload-artifact@v2.3.1
  #       with:
  #         name: windows-ci-build
  #         path: MAUIAction/MAUIAction/bin/Release/net7.0-windows*/**/MAUIAction*.msix

  # MAUI iOS Build
  build-ios:
    runs-on: macos-latest
    name: iOS Build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_P12 }}
          P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_KEY_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Build app
  
  
  
  #  steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_P12 }}
  #         P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_ISSUE_ID }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.APPSTORE_PRIVATE_KEY }}
  #         run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      # - name: Save state
      #   run: echo "{name}={value}" >> $GITHUB_STATE
      # - name: Set output
      #   run: echo "{name}={value}" >> $GITHUB_OUTPUT
      # - name: Setup iOS Certificates
      #   env:  
      #     p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      #     keychain: github-actions-xamarin
      #     keychain-password: ""
      # - name: Setup iOS Provisioning Profiles
      #   uses: apple-actions/download-provisioning-profiles@v1
      #   with:
      #     bundle-id: "com.companyname.Back2LearnApp"
      #     profile-type: "IOS_APP_ADHOC"
      #     issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
      #     api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      # - name: Set iOS version
      #   run: |
      #     /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ secrets.APP_VERSION }}" ./MAUIAction.iOS/Info.plist
      #     /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" ./MAUIAction.iOS/Info.plist

      # - name: Build iOS
      #   run: MSBuild /t:Build /p:Configuration=Release /p:Platform=iPhone /p:BuildIpa=true ./MAUIAction.iOS/MAUIAction.iOS.csproj

      # - name: Upload iOS app to App Center
      #   run: appcenter distribute release --silent --file ./MAUIAction/MAUIAction.iOS/bin/iPhone/Release/MAUIAction.iOS.ipa --app SByteDev/MAUIAction.Xamarin-iOS --group Collaborators --token ${{ secrets.APP_CENTER_TOKEN }}

      # - name: Setup .NET 7
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: 7.0.x
      #     include-prerelease: true

      # - name: Install MAUI Workloads
      #   run: |
      #     dotnet workload install ios --ignore-failed-sources
      #     dotnet workload install maui --ignore-failed-sources

      # - name: Restore Dependencies
      #   run: dotnet restore MAUIAction/MAUIAction/MAUIAction.csproj

      # - name: Build MAUI iOS
      #   run: dotnet build MAUIAction/MAUIAction/MAUIAction.csproj -c Release -f net7.0-ios --no-restore

      # - name: Upload iOS Artifact
      #   uses: actions/upload-artifact@v2.3.1
      #   with:
      #     name: ios-ci-build
      #     path: MAUIAction/MAUIAction/bin/Release/net7.0-ios/**/*.app/
# # MAUI MacCatalyst Build
# build-mac:
#   runs-on: macos-12
#   name: MacCatalyst Build
#   steps:

#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Setup .NET 7
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 7.0.x

#     - name: Install MAUI Workload
#       run: dotnet workload install maui --ignore-failed-sources

#     - name: Restore Dependencies
#       run: dotnet restore MAUIAction/MAUIAction/MAUIAction.csproj

#     - name: Build MAUI MacCatalyst
#       run: dotnet publish MAUIAction/MAUIAction/MAUIAction.csproj -c Release -f net7.0-maccatalyst --no-restore -p:BuildIpa=True

#     - name: Upload MacCatalyst Artifact
#       uses: actions/upload-artifact@v2.3.1
#       with:
#         name: mauibeach-macos-ci-build
#         path: MAUIAction/MAUIAction/bin/Release/net7.0-maccatalyst/maccatalyst-x64/publish/*.pkg
